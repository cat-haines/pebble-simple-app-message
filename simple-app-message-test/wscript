#
# This file is the default set of rules to compile a Pebble application.
#
# Feel free to customize this to your needs.
#

import os.path
import json
import os
import subprocess


top = '.'
out = 'build'


def options(ctx):
    ctx.load('pebble_sdk')


def configure(ctx):
    app_dir = os.getcwd()
    ctx.find_program('pebble')

    package_json_node = ctx.path.find_node('package.json')
    node_folder = ctx.path.find_node('node_modules')

    with open(package_json_node.abspath()) as f:
        package_info = json.load(f)

    for name, p in package_info['dependencies'].iteritems():
        dep_folder = node_folder.find_node(str(name)).abspath()

        if 'dist.zip' not in os.listdir(dep_folder):
            try:
                os.chdir(p)
                print os.getcwd()

                subprocess.check_call(['pebble', 'clean'])
                subprocess.check_call(['pebble', 'build'])

                os.chdir(str(node_folder.abspath()))
                subprocess.check_call(['rm', '-rf', str(dep_folder)])
            except subprocess.calledProcessError:
                print 'Error building ' + dep_folder

    os.chdir(app_dir)
    ctx.load('pebble_sdk')


def build(ctx):
    ctx.load('pebble_sdk')

    build_worker = os.path.exists('worker_src')
    binaries = []

    cached_env = ctx.env
    for platform in ctx.env.TARGET_PLATFORMS:
        ctx.env = ctx.all_envs[platform]
        ctx.set_group(ctx.env.PLATFORM_NAME)
        app_elf = '{}/pebble-app.elf'.format(ctx.env.BUILD_DIR)
        ctx.pbl_program(source=ctx.path.ant_glob('src/**/*.c'), target=app_elf)

        if build_worker:
            worker_elf = '{}/pebble-worker.elf'.format(ctx.env.BUILD_DIR)
            binaries.append({'platform': platform, 'app_elf': app_elf, 'worker_elf': worker_elf})
            ctx.pbl_worker(source=ctx.path.ant_glob('worker_src/**/*.c'), target=worker_elf)
        else:
            binaries.append({'platform': platform, 'app_elf': app_elf})
    ctx.env = cached_env

    ctx.set_group('bundle')
    ctx.pbl_bundle(binaries=binaries,
                   js=ctx.path.ant_glob(['src/js/**/*.js', 'src/js/**/*.json']),
                   js_entry_file='src/js/app.js')
